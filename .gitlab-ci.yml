variables:
  APPNAME_SHORT: neon-tracer
  REGISTRY_PROJECT: zubrdevops/neon-tracer
  ARTIFACTS_PATH: dev-neon-tracer-artifacts

  BIN_NAME: neon-tracer
  BIN_PATH: /usr/sbin
  BUILD_IMAGE: $REGISTRY_PROJECT:build-$CI_COMMIT_REF_SLUG
  CARGO_HOME: /cache/neon-tracer/.cargo
  CARGO_TARGET_DIR: "/cache/neon-tracer/$CI_COMMIT_REF_SLUG/$CI_JOB_NAME"
  CARGO_TARGET_DIR_MASTER: "/cache/neon-tracer/master/$CI_JOB_NAME"

stages:
  - pre_build
  - lint
  - rustfmt
  - build_version
  - build_artifact
  - build
  - deploy_dev
  - ready_sbx
  - notify


include:
  - project: 'shared/tasks'
    ref: master
    file: 'vars/default-zubr.yml'
  - project: 'shared/tasks'
    ref: master
    file: 'vars/upver-tag-naming.yml'
  - project: 'shared/tasks'
    ref: master
    file: 'notify/up-version.yml'
  - project: 'shared/tasks'
    ref: 'master'
    file: 'deploy/docker-dev-v2.yml'                           #deploy docker to dev
  - project: 'shared/tasks'
    ref: master
    file: 'notify/send-failed.yml'
  - project: 'shared/tasks'
    ref: 'master'
    file: 'deploy/ready-sbx.yml'

create_build_image:
  stage: pre_build
  image: docker
  tags: [docker_19_nocache]
  before_script:
    - docker login -u $REGISTRY_LOGIN -p $REGISTRY_PASS
  script:
    - docker pull $REGISTRY_PROJECT:build-master || true
    - docker build --cache-from $REGISTRY_PROJECT:build-master --pull -t $BUILD_IMAGE -f Dockerfile.build .
    - docker push $BUILD_IMAGE
    - echo "Pushed $BUILD_IMAGE"

clear_cache:
  stage: pre_build
  image: docker
  when: manual
  tags: [docker_19_cache]
  script:
    - rm -rf /cache/neon-tracer/$CI_COMMIT_REF_SLUG

lint:
  stage: lint
  image: $BUILD_IMAGE
  tags: [docker_19_cache]
  before_script:
    - "[ ! -d $CARGO_TARGET_DIR ] && if [ -d $CARGO_TARGET_DIR_MASTER ]; then mkdir -p $CARGO_TARGET_DIR && cp -rp $CARGO_TARGET_DIR_MASTER $CARGO_TARGET_DIR; else mkdir -p $CARGO_TARGET_DIR; fi"
    - mkdir -p $CARGO_HOME
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - cargo clippy --version
    - cargo clippy --all-targets --all-features -- || exit 0
    - "cargo metadata --format-version 1 | jq '.packages | map(.dependencies) | flatten | map(select(.source != null)) | map(select(.source | test(\"zubr.dev\"))) | unique_by(.source) | group_by(.name) | map(select(length > 1)) | .[] | {(.[0].name): [.[] | .source]}' | tee /tmp/1"
    - if [ -s /tmp/1 ]; then echo Version mismatch; exit 2; fi

rustfmt:
  stage: rustfmt
  image: $BUILD_IMAGE
  tags: [docker_19_cache]
  before_script:
    - "[ ! -d $CARGO_TARGET_DIR ] && if [ -d $CARGO_TARGET_DIR_MASTER ]; then mkdir -p $CARGO_TARGET_DIR && cp -rp $CARGO_TARGET_DIR_MASTER $CARGO_TARGET_DIR; else mkdir -p $CARGO_TARGET_DIR; fi"
    - mkdir -p $CARGO_HOME
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - cargo fmt -- --check || exit 0

build_artifact:
  stage: build_artifact
  image: $BUILD_IMAGE
  tags: [docker_19_cache]
  variables:
    UPLOAD_ARTIFACT: "rpm-source.tar.gz"
  before_script:
    - "[ ! -d $CARGO_TARGET_DIR ] && if [ -d $CARGO_TARGET_DIR_MASTER ]; then mkdir -p $CARGO_TARGET_DIR && cp -rp $CARGO_TARGET_DIR_MASTER $CARGO_TARGET_DIR; else mkdir -p $CARGO_TARGET_DIR; fi"
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - cargo build --release
    - echo $CARGO_TARGET_DIR
    - mkdir -p artifact${BIN_PATH}
    - ls -la $CARGO_TARGET_DIR
    - cp $CARGO_TARGET_DIR/release/$BIN_NAME artifact${BIN_PATH}/
    - ls -la artifact${BIN_PATH}
    - du artifact
    - tar -czf $UPLOAD_ARTIFACT artifact
  artifacts:
    paths:
      - ./${UPLOAD_ARTIFACT}
    expire_in: 1 day

build_docker:
  stage: build
  tags: [docker_19_cache]
  before_script:
    - docker login -u $REGISTRY_LOGIN -p $REGISTRY_PASS
    - apk update && apk add git make curl
  script:
    - PIPELINE_ID_VERSION=$(curl --user "$REPO_LOGIN:$REPO_PASS" https://$REPO_SRV/repository/$ARTIFACTS_PATH/$APPNAME_SHORT/pipelin-id/$CI_PIPELINE_ID/$VERSION_FILE)
    - 'curl -s -H "X-Consul-Token: $CONSUL_CI_TOKEN" -X PUT ${CONSUL_KV_URL}/pipeline-id/$CI_PIPELINE_ID/version -d $PIPELINE_ID_VERSION'
    - tar -xzf rpm-source.tar.gz
    - >
      docker build
      --build-arg BIN_NAME=${BIN_NAME}
      --tag $REGISTRY_PROJECT:$PIPELINE_ID_VERSION
      --tag $REGISTRY_PROJECT:latest
      -f Dockerfile.dist
      .
    - docker push $REGISTRY_PROJECT:$PIPELINE_ID_VERSION
    - docker push $REGISTRY_PROJECT:latest
#  only:
#    - tags
#    - develop
#    - master
#    - web

Deploy docker to Dev:
  stage: deploy_dev
  tags:
    - deploy_docker_dev
  variables:
    GIT_STRATEGY: none
  script:
    - PIPELINE_ID_VERSION=$(curl -s -H "X-Consul-Token:$CONSUL_CI_TOKEN" ${CONSUL_KV_URL}/pipeline-id/$CI_PIPELINE_ID/version?raw)
    - echo $PIPELINE_ID_VERSION
    - find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;
#    - git clone https://git.zubr.dev/shared/ci-scripts/
#    - chmod 0700 ci-scripts/replace_docker_tag.sh
#    - chmod 0700 ci-scripts/deploy_docker_v2.sh
    - /opt/ci-scripts/deploy_docker_v2.sh DEV
  only:
    - develop
    - master
    - tags
    - web

Deploy docker to Dev not master:
  stage: deploy_dev
  tags:
    - deploy_docker_dev
  variables:
    GIT_STRATEGY: none
  script:
    - PIPELINE_ID_VERSION=$(curl -s -H "X-Consul-Token:$CONSUL_CI_TOKEN" ${CONSUL_KV_URL}/pipeline-id/$CI_PIPELINE_ID/version?raw)
    - echo $PIPELINE_ID_VERSION
    - find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;
#    - git clone https://git.zubr.dev/shared/ci-scripts/
#    - chmod 0700 ci-scripts/replace_docker_tag.sh
#    - chmod 0700 ci-scripts/deploy_docker_v2.sh
    - /opt/ci-scripts/deploy_docker_v2.sh DEV
    - 'curl -s -H "X-Consul-Token: $CONSUL_CI_TOKEN" -X PUT ${CONSUL_KV_URL}/last_version -d $PIPELINE_ID_VERSION'
  when: manual
  except:
    - master
    - tags
